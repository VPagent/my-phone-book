{"version":3,"file":"static/js/47.c47c325c.chunk.js","mappings":"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","sources":["webpack://my-phone-book/./src/components/AddContactForm/addContactForm.module.scss?04e7","helpers/firstLetter.ts","components/AddContactForm/AddContactForm.tsx","webpack://my-phone-book/./src/components/ContactCard/contactCard.module.scss?ce97","webpack://my-phone-book/./src/components/EditForm/editForm.module.scss?eee5","components/EditForm/EditForm.tsx","components/ContactCard/ContactCard.tsx","webpack://my-phone-book/./src/components/ContactsList/contactsList.module.scss?cf93","components/ContactsList/ContactsList.tsx","webpack://my-phone-book/./src/pages/ContactsPage/contactsPage.module.scss?7cd3","pages/ContactsPage/ContactsPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"addContactForm_form__sFp4o\",\"form_text\":\"addContactForm_form_text__1+fAH\",\"label\":\"addContactForm_label__Es5LV\",\"input\":\"addContactForm_input__1dDB+\",\"span\":\"addContactForm_span__oaxiX\",\"btn\":\"addContactForm_btn__jo5oy\"};","\n\n\nexport const bigLetter = (value:string):string => {\n    \n    return value ? `${value[0].toLocaleUpperCase()}${value.slice(1)}` : \"\"\n}","import s from '../AddContactForm/addContactForm.module.scss'\nimport {BsFillPersonFill, BsTelephoneFill} from 'react-icons/bs'\nimport React, { useState } from 'react';\nimport { postContacts } from '../../services/API';\nimport { useGlobalState } from '../../globalState/store';\nimport { toast } from 'react-toastify';\nimport { bigLetter } from '../../helpers/firstLetter';\n\nconst AddContactForm:React.FC = () => {\n    const [items, setItems] = useGlobalState(\"items\")\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const handleChangeInput = (e:React.ChangeEvent<HTMLInputElement>) => {\n        switch(e.target.name){\n            case \"name\":\n                return setName(bigLetter(e.target.value));\n            case \"tel\":\n                return setNumber(bigLetter(e.target.value));\n            default: console.log(\"error in switch\")\n        }\n    }\n\n    const handleSubmit = (e:React.FormEvent) => {\n        e.preventDefault();\n        const obj = { \"name\": name,  \"number\": number };\n        const inspect = items.length > 0 && items.some(elem => elem.name === name);\n        if (inspect) {\n          return toast.warning(`${name} is already in contacts`);\n        }\n       postContacts(obj).then(res => setItems(prev => [...prev, res]))\n       toast.success(`contact ${name} has been added`)\n       reset()\n    }\n    const reset = () => {\n        setName('')\n        setNumber('')\n    }\n    return(\n        <form action=\"\" className={s.form} onSubmit={handleSubmit}>\n            <p className={s.form_text}>Please add contact</p>\n            <label className={s.label}>\n                <input className={s.input} name=\"name\" type=\"text\" placeholder='Name'onChange={handleChangeInput} value={name}/>\n                <span className={s.span}><BsFillPersonFill className={s.icon}/></span>\n            </label>\n            <label className={s.label}>\n                <input className={s.input} name=\"tel\" type=\"text\" placeholder='Tel' onChange={handleChangeInput} value={number}/>\n                <span className={s.span}><BsTelephoneFill className={s.icon}/></span>\n            </label>\n            <button className={s.btn} type='submit'>add</button>\n        </form>\n    )\n}\n\nexport default AddContactForm","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"contactCard_card__X+QgY\",\"card_text_wrapper\":\"contactCard_card_text_wrapper__lwre9\",\"card_text\":\"contactCard_card_text__oKxZR\",\"card_controls\":\"contactCard_card_controls__eIYY5\",\"card_btn\":\"contactCard_card_btn__xxn6R\",\"span\":\"contactCard_span__LmK-Q\",\"card_btn_icon\":\"contactCard_card_btn_icon__aaRvb\",\"icon\":\"contactCard_icon__XlYcG\"};","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"editForm_overlay__gNUJK\",\"form\":\"editForm_form__M8-hU\",\"labelWrapper\":\"editForm_labelWrapper__U5UZy\",\"label\":\"editForm_label__98jfN\",\"icon\":\"editForm_icon__4ynNJ\",\"input\":\"editForm_input__ban6J\",\"controlsWrapper\":\"editForm_controlsWrapper__Qm2ES\",\"btn\":\"editForm_btn__gLumR\",\"checkIcon\":\"editForm_checkIcon__UWrbH\"};","import s from '../EditForm/editForm.module.scss'\nimport { CgClose } from 'react-icons/cg'\nimport React, { useState } from 'react'\nimport { Item } from '../../types/types'\nimport { getContacts, patchContacts } from '../../services/API'\nimport { useGlobalState } from '../../globalState/store'\nimport { MdPersonOutline } from 'react-icons/md'\nimport { BsTelephone, BsFillCheckSquareFill} from 'react-icons/bs'\nimport { toast } from 'react-toastify'\n\ntype Props = {\n    id: Item[\"id\"],\n    onClose: Function,\n}\n\nconst EditForm:React.FC<Props> = ({id, onClose}) => {\n\n    const [name, setName] = useState('')\n    const [tel, setTel] = useState('')\n    const [items, setItems] = useGlobalState('items')\n\n    const handleChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n        switch(e.currentTarget.name){\n            case \"name\":\n                return setName(e.target.value);\n            case \"tel\":\n                return setTel(e.target.value);\n            default: return console.log(\"Error in switch\")\n        }\n    }\n    const handleSubmit = (e:React.FormEvent) => {\n        e.preventDefault()\n        if(!name && !tel){\n            return toast.warning(\"Failed, all fields must be filled\")\n        }\n        const obj = {\"name\": name, \"number\": tel}\n        patchContacts(id, obj)\n        getContacts().then(res => setItems(res))\n        toast.success(\"Contact has been updated\")\n        onClose()\n    }\n\n    return items && (\n        <>\n        <div className={s.overlay} onClick={() => onClose()}></div>\n        <form className={s.form} onSubmit={handleSubmit}>\n            <div className={s.labelWrapper}>\n            <label className={s.label}>\n               <span className={s.span}><MdPersonOutline className={s.icon}/></span>\n                <input className={s.input}  type=\"text\" name=\"name\" value={name} onChange={handleChange}/>\n            </label>\n            <label className={s.label}>\n                <span className={s.span}><BsTelephone size={14} className={s.icon}/></span>\n                <input className={s.input} type=\"text\" name=\"tel\" value={tel} onChange={handleChange}/>\n            </label>\n            </div>\n            <div className={s.controlsWrapper}>\n                <button type='button' className={s.btn} onClick={() => onClose()}>\n                    <CgClose  size={18}/>\n                </button>\n                <button type='submit' className={s.btn}>\n                    <BsFillCheckSquareFill size={18} className={s.checkIcon}/>\n                </button>\n            </div>\n        </form>\n        </>\n    )\n}\n\nexport default EditForm","import { Item } from '../../types/types'\nimport s from '../ContactCard/contactCard.module.scss'\nimport {MdDeleteOutline} from 'react-icons/md'\nimport { useGlobalState } from '../../globalState/store'\nimport { deleteContact } from '../../services/API'\nimport {BsFillPersonFill, BsTelephoneFill} from 'react-icons/bs'\nimport {FiEdit2} from 'react-icons/fi'\nimport { useState } from 'react'\nimport EditForm from '../EditForm'\nimport { toast } from 'react-toastify'\n\ntype Props = {\n    item: Item\n}\n\nconst ContactCard:React.FC<Props> = ({item}) => {\n    const {id, name, number} = item\n    const [items, setItems] = useGlobalState(\"items\")\n    const [isFormOpen, setIsFormOpen] = useState(false)\n\n    const handleDelete = () => {\n        if(items){\n        deleteContact(id)\n        setItems(prev => prev.filter(elem => elem.id !== id))\n        toast.success(\"contact has been deleted\")\n        }\n    }\n    const handleOpenForm = () => {\n        setIsFormOpen(prev => !prev)\n    }\n    \n    return(\n        <li id={id} className={s.card}>\n            <div className={s.card_text_wrapper}>\n                <p className={s.card_text}><BsFillPersonFill className={s.icon}/>{name}</p>\n                <p className={s.card_text}><BsTelephoneFill className={s.icon}/>{number}</p>\n            </div>\n            <div className={s.card_controls}>\n            {isFormOpen ? <EditForm id={id} onClose={handleOpenForm}/> :\n                <button className={s.card_btn} type='button' onClick={handleOpenForm}>\n                    <FiEdit2 className={s.card_btn_icon}/>\n                    <span className={s.span}>edit</span>\n                </button>}\n                <button className={s.card_btn} type='button' id={id} onClick={handleDelete}>\n                    <MdDeleteOutline className={s.card_btn_icon}size={20}/>\n                </button>\n            </div>\n        </li>\n    )\n}\n\n\nexport default ContactCard","// extracted by mini-css-extract-plugin\nexport default {\"box\":\"contactsList_box__pt67J\",\"title\":\"contactsList_title__nPcmn\",\"input\":\"contactsList_input__0sS8y\",\"list\":\"contactsList_list__aivKi\"};","import { useState } from 'react'\nimport { useGlobalState } from '../../globalState/store'\nimport { patchContacts } from '../../services/API'\nimport ContactCard from '../ContactCard'\nimport s from '../ContactsList/contactsList.module.scss'\n\n\nconst ContactsList:React.FC = () => {\n\n    const [items] = useGlobalState(\"items\")\n    const [filter, setFilter] = useState(\"\")\n    const filteredItems = items.filter(elem => elem.name.toLowerCase().includes(filter.toLowerCase()))\n\n    const handleChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n        setFilter(e.target.value)\n    }\n\n    return(\n        <>\n        <div className={s.box}>\n            <p className={s.title}>Filter</p>\n            <input type=\"text\" className={s.input} onChange={handleChange} value={filter}/>\n        </div>\n        <ul className={s.list}>\n            {filteredItems.map(elem => \n            <ContactCard key={elem.id} item={elem} />)}\n        </ul>\n        </>\n    )\n}\n\n\nexport default ContactsList","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"contactsPage_title__SxdMT\",\"text\":\"contactsPage_text__lodMD\"};","import { useEffect } from 'react'\nimport AddContactForm from '../../components/AddContactForm'\nimport ContactsList from '../../components/ContactsList'\nimport Container from '../../components/Container'\nimport { useGlobalState } from '../../globalState/store'\nimport { getContacts } from '../../services/API'\nimport s from '../ContactsPage/contactsPage.module.scss'\n\n\n\n\n\nconst ContactsPage:React.FC = () => {\n\n    const [items, setItems] = useGlobalState(\"items\")\n\n    useEffect(()=> {\n        getContacts().then(res => setItems(res))\n        // eslint-disable-next-line\n    }, [])\n\n    return(\n        <section>\n            <Container>\n                <h2 className={s.title}>ContactsPage</h2>  \n                <p className={s.text}>On this page you can recreate your phone book, as well as edit contacts, if there is a change in the phone number or contact name</p> \n                <AddContactForm />\n                <ContactsList />\n            </Container>\n        </section>\n       \n    )\n}\n\n\nexport default ContactsPage\n\n\n"],"names":["bigLetter","value","toLocaleUpperCase","slice","useGlobalState","items","setItems","useState","name","setName","number","setNumber","handleChangeInput","e","target","console","log","reset","action","className","s","onSubmit","preventDefault","obj","length","some","elem","toast","postContacts","then","res","prev","type","placeholder","onChange","id","onClose","tel","setTel","handleChange","currentTarget","onClick","patchContacts","getContacts","size","item","isFormOpen","setIsFormOpen","handleOpenForm","deleteContact","filter","setFilter","filteredItems","toLowerCase","includes","map","useEffect","Container"],"sourceRoot":""}